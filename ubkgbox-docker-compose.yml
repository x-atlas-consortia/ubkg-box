# UBKGBox Docker Compose file
name: ubkgbox

services:

  ############
  # ubkg-front-end provides both a UI with a landing page and a reverse proxy to the other services.

  ubkg-front-end:
    container_name: front-end
    image: hubmap/ubkg-front-end:latest
    ports:
      - "9000:8080"   # HTTP
      - "9100:7071"   # Bolt via stream.

    # Wait until the neo4j server in ubkg-back-end is running.
    depends_on:
      ubkg-back-end:
        condition: service_healthy

    init: true
    restart: always

    volumes:
      # Mount the nginx logs to the container.
      - "./log_ubkgbox:/usr/src/app/log"

    environment:
      - BOLT_PORT=9100 # must match the external Bolt port

      # neo4j browser port for the ubkg-back-end service.
      - UI_PORT
      # UID and GID 1001 to match the ubkg user by default.
      # These environment variables will be passed to the Dockerfile and used to configure the non-root
      # user under which nginx will run.
      - HOST_GID=${HOST_GID:-1002}
      - HOST_UID=${HOST_UID:-1002}

    networks:
      # UBKGBox internal network
      - ubkg_net


    mem_limit: 2g # Limit to 2GB of RAM

  ############
  # ubkg-auth hosts the ubkg-auth UMLS authorization service.

  ubkg-auth:
    image: hubmap/ubkg-auth:latest
    container_name: auth
    expose:
      # internal network port
      - "8080"

    # Wait until the neo4j server in ubkg-back-end is running.
    depends_on:
      ubkg-back-end:
        condition: service_healthy

    init: true
    restart: always

    volumes:
      # Mount the app config (in the instance subdirectory of the build directory) to the container to keep it external to the image.
      - "./log_ubkgbox:/usr/src/app/log"
      # Mount the nginx logs to the container.
      - "./api_cfg:/usr/src/app/src/ubkg_api/instance"

    environment:
      # UID and GID 1001 to match the ubkg user by default.
      # These environment variables will be passed to the Dockerfile and used to configure the non-root
      # user under which nginx will run.
      - HOST_GID=${HOST_GID:-1003}
      - HOST_UID=${HOST_UID:-1003}

    mem_limit: 2g # Limit to 2GB of RAM

    networks:
      - ubkg_net

  ############
  # ubkg-api hosts the UBKG-API.

  ubkg-api:
    # Use the published image and tag from Docker Hub
    image: hubmap/ubkg-api:latest
    container_name: api

    # internal network port
    expose:
      - "8080"
    volumes:
      # Mount the app config (in the instance subdirectory of the build directory) to the container to keep it external to the image.
      - "./api_cfg:/usr/src/app/src/ubkg_api/instance"
      # Mount the nginx logs to the container.
      - "./log_ubkgbox:/usr/src/app/log"

    environment:
      # UID and GID 1001 to match the ubkg user by default.
      # These environment variables will be passed to the Dockerfile and used to configure the non-root
      # user under which nginx will run.
      - HOST_GID=${HOST_GID:-1001}
      - HOST_UID=${HOST_UID:-1001}

    mem_limit: 2g # Limit to 2GB of RAM

    # Wait until the neo4j server ubkg-back-end is running.
    depends_on:
      ubkg-back-end:
        condition: service_healthy

    networks:
      - ubkg_net

  ############
  # ubkg-guesdt hosts the Guesdt application.

  ubkg-guesdt:
    # Use the published image and tag from Docker Hub
    image: hubmap/ubkg-guesdt:latest
    container_name: Guesdt

    # internal network port
    expose:
      - "8080"
    volumes:
      # Mount the nginx logs to the container.
      - "./log_ubkgbox:/usr/src/app/log"

    # Wait until the neo4j server ubkg-back-end is running.
    depends_on:
      ubkg-back-end:
        condition: service_healthy

    networks:
      - ubkg_net

  ############
  # ubkg-swagger is a Swagger UI linked to the ubkg-api service.
  ubkg-swagger:
    image: swaggerapi/swagger-ui

    container_name: swagger

    environment:
      # Used to point to the ubkg-api service and its Swagger specification in GitHub.
      SWAGGER_YAML_URL: https://raw.githubusercontent.com/x-atlas-consortia/ubkg-api/jas_ubkgbox/ubkg-api-ubkgbox-spec.yaml
      SERVER_URL: http://localhost:9000/api          # The port should match the exposed port for the ubkg-front-end service

    volumes:
      # Volumes are mounted before entrypoint.sh executes.
      # Custom Swagger UI index with references to swagger-initializer.js and swagger-server-url.js.template.
      - ./swagger/index.html:/usr/share/nginx/html/index.html
      # Custom Swagger initialization file that loads the Swagger specification for ubkg-api from GitHub.
      - ./swagger/swagger-initializer.js:/usr/share/nginx/html/swagger-initializer.js
      - # Swagger JS template of placeholder URLs for Swagger YAML and URL
      - ./swagger/swagger-server-url.js.template:/usr/share/nginx/html/swagger-server-url.js.template
      # Entrypoint that replaces placeholder URLs in swagger-server-url.js.template with environment variables.
      - ./swagger/entrypoint.sh:/usr/share/nginx/html/entrypoint.sh

    entrypoint:
      # Passes environment variables SWAGGER_YAML_URL and SERVER_URL to container to allow configuration of port for Swagger
      - /usr/share/nginx/html/entrypoint.sh

    expose:
      - "8080" 

    depends_on:
      ubkg-back-end:
        condition: service_healthy

    networks:
      - ubkg_net

  ############
  # ubkg-back-end is based on a local turnkey distribution of a Docker neo4j container. 

  ubkg-back-end:
    # Use the published image and tag from Docker Hub that was used to build the turnkey Docker distribution.
    image: hubmap/ubkg-neo4j:current-release
    container_name: neo4j

   
    # Map to the external bind mounts. Directory names will match those of the turnkey Docker distribution.
    volumes:
      # neo4j database
      - "./data:/usr/src/app/neo4j/data"
      # neo4j logs
      - "./logs:/usr/src/app/neo4j/logs"

    environment:
      # neo4j username and password obtained by the build_ubkgbox.sh script from container.cfg.
      - NEO4J_USER
      - NEO4J_PASSWORD
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474

    mem_limit: 2g 

    # Check that the neo4j service is running in the container. The startup process takes some time; in addition, it stops and starts
    # the neo4j server.
    healthcheck:
      test: [ "CMD", "/usr/src/app/neo4j/bin/cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "MATCH () RETURN count(*) as count" ]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s

    networks:
      - ubkg_net


networks:

  ubkg_net:
    driver: bridge
    